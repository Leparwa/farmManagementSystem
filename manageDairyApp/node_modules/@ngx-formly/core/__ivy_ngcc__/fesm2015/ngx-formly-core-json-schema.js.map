{"version":3,"file":"ngx-formly-core-json-schema.js","sources":["@ngx-formly/core/json-schema/formly-json-schema.service.ts"],"names":["getFieldInitialValue","reverseDeepMerge","clone"],"mappings":"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","sourcesContent":["import { Injectable } from '@angular/core';\nimport { FormlyFieldConfig } from '@ngx-formly/core';\nimport { JSONSchema7, JSONSchema7TypeName } from 'json-schema';\nimport { AbstractControl, FormGroup } from '@angular/forms';\nimport {\n  ÉµreverseDeepMerge as reverseDeepMerge,\n  ÉµgetFieldInitialValue as getFieldInitialValue,\n  Éµclone as clone,\n} from '@ngx-formly/core';\nimport { tap } from 'rxjs/operators';\n\nexport interface FormlyJsonschemaOptions {\n  /**\n   * allows to intercept the mapping, taking the already mapped\n   * formly field and the original JSONSchema source from which it\n   * was mapped.\n   */\n  map?: (mappedField: FormlyFieldConfig, mapSource: JSONSchema7) => FormlyFieldConfig;\n}\n\n// https://stackoverflow.com/a/27865285\nfunction decimalPlaces(a: number) {\n  if (!isFinite(a)) {\n    return 0;\n  }\n\n  let e = 1, p = 0;\n  while (Math.round(a * e) / e !== a) { e *= 10; p++; }\n\n  return p;\n}\n\nfunction isEmpty(v: any) {\n  return v === '' || v === undefined || v === null;\n}\n\nfunction isObject(v: any) {\n  return v != null && typeof v === 'object' && !Array.isArray(v);\n}\n\nfunction isConst(schema: JSONSchema7) {\n  return schema.hasOwnProperty('const') || (schema.enum && schema.enum.length === 1);\n}\n\nfunction totalMatchedFields(field: FormlyFieldConfig): number {\n  if (!field.fieldGroup) {\n    return field.key && getFieldInitialValue(field) !== undefined ? 1 : 0;\n  }\n\n  return field.fieldGroup.reduce((s, f) => totalMatchedFields(f) + s, 0);\n}\n\ninterface IOptions extends FormlyJsonschemaOptions {\n  schema: JSONSchema7;\n  resetOnHide?: boolean;\n  shareFormControl?: boolean;\n  ignoreDefault?: boolean;\n  readOnly?: boolean;\n  key?: FormlyFieldConfig['key'];\n}\n\n@Injectable({ providedIn: 'root' })\nexport class FormlyJsonschema {\n  toFieldConfig(schema: JSONSchema7, options?: FormlyJsonschemaOptions): FormlyFieldConfig {\n    return this._toFieldConfig(schema, { schema, ...(options || {}) });\n  }\n\n  private _toFieldConfig(schema: JSONSchema7, { key, ...options }: IOptions): FormlyFieldConfig {\n    schema = this.resolveSchema(schema, options);\n\n    let field: FormlyFieldConfig = {\n      type: this.guessType(schema),\n      defaultValue: schema.default,\n      templateOptions: {\n        label: schema.title,\n        readonly: schema.readOnly,\n        description: schema.description,\n      },\n    };\n\n    if (key != null) {\n      field.key = key;\n    }\n\n    if (!options.ignoreDefault && (schema.readOnly || options.readOnly)) {\n      field.templateOptions.disabled = true;\n      options = { ...options, readOnly: true };\n    }\n\n    if (options.resetOnHide) {\n      field['resetOnHide'] = true;\n    }\n\n    if (options.shareFormControl === false) {\n      field['shareFormControl'] = false;\n    }\n\n    if (options.ignoreDefault) {\n      delete field.defaultValue;\n    }\n\n    switch (field.type) {\n      case 'null': {\n        this.addValidator(field, 'null', ({ value }) => value === null);\n        break;\n      }\n      case 'number':\n      case 'integer': {\n        field.parsers = [v => isEmpty(v) ? null : Number(v)];\n        if (schema.hasOwnProperty('minimum')) {\n          field.templateOptions.min = schema.minimum;\n        }\n\n        if (schema.hasOwnProperty('maximum')) {\n          field.templateOptions.max = schema.maximum;\n        }\n\n        if (schema.hasOwnProperty('exclusiveMinimum')) {\n          field.templateOptions.exclusiveMinimum = schema.exclusiveMinimum;\n          this.addValidator(field, 'exclusiveMinimum', ({ value }) => isEmpty(value) || (value > schema.exclusiveMinimum));\n        }\n\n        if (schema.hasOwnProperty('exclusiveMaximum')) {\n          field.templateOptions.exclusiveMaximum = schema.exclusiveMaximum;\n          this.addValidator(field, 'exclusiveMaximum', ({ value }) => isEmpty(value) || (value < schema.exclusiveMaximum));\n        }\n\n        if (schema.hasOwnProperty('multipleOf')) {\n          field.templateOptions.step = schema.multipleOf;\n          this.addValidator(field, 'multipleOf', ({ value }) => {\n            if (isEmpty(value) || typeof value !== 'number' || value === 0 || schema.multipleOf <= 0) {\n              return true;\n            }\n\n            // https://github.com/ajv-validator/ajv/issues/652#issue-283610859\n            const multiplier = Math.pow(10, decimalPlaces(schema.multipleOf));\n            return Math.round(value * multiplier) % Math.round(schema.multipleOf * multiplier) === 0;\n          });\n        }\n        break;\n      }\n      case 'string': {\n        const schemaType = schema.type as JSONSchema7TypeName;\n        if (Array.isArray(schemaType) && (schemaType.indexOf('null') !== -1)) {\n          field.parsers = [v => isEmpty(v) ? null : v];\n        }\n\n        ['minLength', 'maxLength', 'pattern'].forEach(prop => {\n          if (schema.hasOwnProperty(prop)) {\n            field.templateOptions[prop] = schema[prop];\n          }\n        });\n        break;\n      }\n      case 'object': {\n        field.fieldGroup = [];\n\n        const [propDeps, schemaDeps] = this.resolveDependencies(schema);\n        Object.keys(schema.properties || {}).forEach(property => {\n          const f = this._toFieldConfig(<JSONSchema7> schema.properties[property], { ...options, key: property });\n          field.fieldGroup.push(f);\n          if (\n            (Array.isArray(schema.required) && schema.required.indexOf(property) !== -1)\n            || propDeps[property]\n          ) {\n            f.expressionProperties = {\n              ...(f.expressionProperties || {}),\n              'templateOptions.required': (m, s, f) => {\n                let parent = f.parent;\n                const model = f.fieldGroup && f.key != null ? parent.model : f.model;\n                while (parent.key == null && parent.parent) {\n                  parent = parent.parent;\n                }\n\n                const required = parent && parent.templateOptions ? parent.templateOptions.required : false;\n                if (!model && !required) {\n                  return false;\n                }\n\n                if (Array.isArray(schema.required) && schema.required.indexOf(property) !== -1) {\n                  return true;\n                }\n\n                return propDeps[property] && (m && propDeps[property].some(k => !isEmpty(m[k])));\n              },\n            };\n          }\n\n          if (schemaDeps[property]) {\n            const getConstValue = (s: JSONSchema7) => {\n              return s.hasOwnProperty('const') ? s.const : s.enum[0];\n            };\n\n            const oneOfSchema = schemaDeps[property].oneOf;\n            if (\n              oneOfSchema\n              && oneOfSchema.every(o => o.properties && o.properties[property] && isConst(o.properties[property]))\n            ) {\n              oneOfSchema.forEach(oneOfSchemaItem => {\n                const { [property]: constSchema, ...properties } = oneOfSchemaItem.properties;\n                field.fieldGroup.push({\n                  ...this._toFieldConfig({ ...oneOfSchemaItem, properties }, { ...options, resetOnHide: true }),\n                  hideExpression: m => !m || getConstValue(constSchema) !== m[property],\n                });\n              });\n            } else {\n              field.fieldGroup.push({\n                ...this._toFieldConfig(schemaDeps[property], options),\n                hideExpression: m => !m || isEmpty(m[property]),\n              });\n            }\n\n          }\n        });\n\n        if (schema.oneOf) {\n          field.fieldGroup.push(this.resolveMultiSchema(\n            'oneOf',\n            <JSONSchema7[]> schema.oneOf,\n            { ...options, shareFormControl: false },\n          ));\n        }\n\n        if (schema.anyOf) {\n          field.fieldGroup.push(this.resolveMultiSchema(\n            'anyOf',\n            <JSONSchema7[]> schema.anyOf,\n            options,\n          ));\n        }\n        break;\n      }\n      case 'array': {\n        if (schema.hasOwnProperty('minItems')) {\n          field.templateOptions.minItems = schema.minItems;\n          this.addValidator(field, 'minItems', ({ value }) => isEmpty(value) || (value.length >= schema.minItems));\n        }\n        if (schema.hasOwnProperty('maxItems')) {\n          field.templateOptions.maxItems = schema.maxItems;\n          this.addValidator(field, 'maxItems', ({ value }) => isEmpty(value) || (value.length <= schema.maxItems));\n        }\n        if (schema.hasOwnProperty('uniqueItems')) {\n          field.templateOptions.uniqueItems = schema.uniqueItems;\n          this.addValidator(field, 'uniqueItems', ({ value }) => {\n            if (isEmpty(value) || !schema.uniqueItems) {\n              return true;\n            }\n\n            const uniqueItems = Array.from(\n              new Set(value.map((v: any) => JSON.stringify(v))),\n            );\n\n            return uniqueItems.length === value.length;\n          });\n        }\n\n        // resolve items schema needed for isEnum check\n        if (schema.items && !Array.isArray(schema.items)) {\n          schema.items = this.resolveSchema(<JSONSchema7> schema.items, options);\n        }\n\n        // TODO: remove isEnum check once adding an option to skip extension\n        if (!this.isEnum(schema)) {\n          const _this = this;\n          Object.defineProperty(field, 'fieldArray', {\n            get: function () {\n              if (schema.items && !Array.isArray(schema.items)) {\n                // When items is a single schema, the additionalItems keyword is meaningless, and it should not be used.\n                return _this._toFieldConfig(<JSONSchema7> schema.items, options);\n              }\n\n              const length = this.fieldGroup ? this.fieldGroup.length : 0;\n              const itemSchema = schema.items && schema.items[length]\n                ? schema.items[length]\n                : schema.additionalItems;\n\n              return itemSchema\n                ? _this._toFieldConfig(<JSONSchema7> itemSchema, options)\n                : {};\n            },\n            enumerable: true,\n            configurable: true,\n          });\n        }\n\n        break;\n      }\n    }\n\n    if (schema.hasOwnProperty('const')) {\n      field.templateOptions.const = schema.const;\n      this.addValidator(field, 'const', ({ value }) => value === schema.const);\n      if (!field.type) {\n        field.defaultValue = schema.const;\n      }\n    }\n\n    if (this.isEnum(schema)) {\n      field.templateOptions.multiple = field.type === 'array';\n      field.type = 'enum';\n      field.templateOptions.options = this.toEnumOptions(schema);\n    }\n\n    // map in possible formlyConfig options from the widget property\n    if (schema['widget'] && schema['widget'].formlyConfig) {\n      field = this.mergeFields(field, schema['widget'].formlyConfig);\n    }\n\n    // if there is a map function passed in, use it to allow the user to\n    // further customize how fields are being mapped\n    return options.map ? options.map(field, schema) : field;\n  }\n\n  private resolveSchema(schema: JSONSchema7, options: IOptions) {\n    if (schema && schema.$ref) {\n      schema = this.resolveDefinition(schema, options);\n    }\n\n    if (schema && schema.allOf) {\n      schema = this.resolveAllOf(schema, options);\n    }\n\n    return schema;\n  }\n\n  private resolveAllOf({ allOf, ...baseSchema }: JSONSchema7, options: IOptions) {\n    if (!allOf.length) {\n      throw Error(`allOf array can not be empty ${allOf}.`);\n    }\n\n    return allOf.reduce((base: JSONSchema7, schema: JSONSchema7) => {\n      schema = this.resolveSchema(schema, options);\n      if (base.required && schema.required) {\n        base.required = [...base.required, ...schema.required];\n      }\n\n      if (schema.uniqueItems) {\n        base.uniqueItems = schema.uniqueItems;\n      }\n\n      // resolve to min value\n      ['maxLength', 'maximum', 'exclusiveMaximum', 'maxItems', 'maxProperties']\n        .forEach(prop => {\n          if (!isEmpty(base[prop]) && !isEmpty(schema[prop])) {\n            base[prop] = base[prop] < schema[prop] ? base[prop] : schema[prop];\n          }\n        });\n\n      // resolve to max value\n      ['minLength', 'minimum', 'exclusiveMinimum', 'minItems', 'minProperties']\n        .forEach(prop => {\n          if (!isEmpty(base[prop]) && !isEmpty(schema[prop])) {\n            base[prop] = base[prop] > schema[prop] ? base[prop] : schema[prop];\n          }\n        });\n\n      return reverseDeepMerge(base, schema);\n    }, baseSchema);\n  }\n\n  private resolveMultiSchema(\n    mode: 'oneOf' | 'anyOf',\n    schemas: JSONSchema7[],\n    options: IOptions,\n  ): FormlyFieldConfig {\n    return {\n      type: 'multischema',\n      fieldGroup: [\n        {\n          type: 'enum',\n          defaultValue: -1,\n          templateOptions: {\n            multiple: mode === 'anyOf',\n            options: schemas\n              .map((s, i) => ({ label: s.title, value: i, disabled: s.readOnly })),\n          },\n          hooks: {\n            onInit: f => f.formControl.valueChanges.pipe(\n              tap(() => (f.options as any)._checkField(f.parent)),\n            ),\n          },\n        },\n        {\n          fieldGroup: schemas.map((s, i) => ({\n            ...this._toFieldConfig(s, { ...options, resetOnHide: true }),\n            hideExpression: (m, fs, f) => {\n              const control = f.parent.parent.fieldGroup[0].formControl;\n              if (control.value === -1) {\n                let value = f.parent.fieldGroup\n                  .map((f, i) => [f, i] as [FormlyFieldConfig, number])\n                  .filter(([f, i]) => {\n                    return this.isFieldValid(f, schemas[i], options);\n                  })\n                  .sort(([f1], [f2]) => {\n                    const matchedFields1 = totalMatchedFields(f1);\n                    const matchedFields2 = totalMatchedFields(f2);\n                    if (matchedFields1 === matchedFields2) {\n                      if (f1.templateOptions.disabled === f2.templateOptions.disabled) {\n                        return 0;\n                      }\n\n                      return f1.templateOptions.disabled ? 1 : -1;\n                    }\n\n                    return matchedFields2 > matchedFields1 ? 1 : -1;\n                  })\n                  .map(([, i]) => i)\n                  ;\n\n                if (mode === 'anyOf') {\n                  const definedValue = value.filter(i => totalMatchedFields(f.parent.fieldGroup[i]));\n                  value = definedValue.length > 0 ? definedValue : [value[0] || 0];\n                }\n\n                value = value.length > 0 ? value : [0];\n                control.setValue(mode === 'anyOf' ? value : value[0]);\n              }\n\n              return Array.isArray(control.value)\n                ? control.value.indexOf(i) === -1\n                : control.value !== i;\n            },\n          })),\n        },\n      ],\n    };\n  }\n\n  private resolveDefinition(schema: JSONSchema7, options: IOptions): JSONSchema7 {\n    const [uri, pointer] = schema.$ref.split('#/');\n    if (uri) {\n      throw Error(`Remote schemas for ${schema.$ref} not supported yet.`);\n    }\n\n    const definition = !pointer ? null : pointer.split('/').reduce(\n      (def, path) => def && def.hasOwnProperty(path) ? def[path] : null,\n      options.schema,\n    );\n\n    if (!definition) {\n      throw Error(`Cannot find a definition for ${schema.$ref}.`);\n    }\n\n    if (definition.$ref) {\n      return this.resolveDefinition(definition, options);\n    }\n\n    return {\n      ...definition,\n      ...['title', 'description', 'default', 'widget'].reduce((annotation, p) => {\n        if (schema.hasOwnProperty(p)) {\n          annotation[p] = schema[p];\n        }\n\n        return annotation;\n      }, {}),\n    };\n  }\n\n  private resolveDependencies(schema: JSONSchema7) {\n    const deps = {};\n    const schemaDeps = {};\n\n    Object.keys(schema.dependencies || {}).forEach(prop => {\n      const dependency = schema.dependencies[prop] as JSONSchema7;\n      if (Array.isArray(dependency)) {\n        // Property dependencies\n        dependency.forEach(dep => {\n          if (!deps[dep]) {\n            deps[dep] = [prop];\n          } else {\n            deps[dep].push(prop);\n          }\n        });\n      } else {\n        // schema dependencies\n        schemaDeps[prop] = dependency;\n      }\n    });\n\n    return [deps, schemaDeps];\n  }\n\n  private guessType(schema: JSONSchema7) {\n    const type = schema ? schema.type as JSONSchema7TypeName : null;\n    if (!type && schema && schema.properties) {\n      return 'object';\n    }\n\n    if (Array.isArray(type)) {\n      if (type.length === 1) {\n        return type[0];\n      }\n\n      if (type.length === 2 && type.indexOf('null') !== -1) {\n        return type[type[0] === 'null' ? 1 : 0];\n      }\n    }\n\n    return type;\n  }\n\n  private addValidator(field: FormlyFieldConfig, name: string, validator: (control: AbstractControl) => boolean) {\n    field.validators = field.validators || {};\n    field.validators[name] = validator;\n  }\n\n  private isEnum(schema: JSONSchema7) {\n    return schema.enum\n      || (schema.anyOf && schema.anyOf.every(isConst))\n      || (schema.oneOf && schema.oneOf.every(isConst))\n      || schema.uniqueItems && schema.items && !Array.isArray(schema.items) && this.isEnum(<JSONSchema7> schema.items);\n  }\n\n  private toEnumOptions(schema: JSONSchema7) {\n    if (schema.enum) {\n      return schema.enum.map(value => ({ value, label: value }));\n    }\n\n    const toEnum = (s: JSONSchema7) => {\n      const value = s.hasOwnProperty('const') ? s.const : s.enum[0];\n      const option: any = { value: value, label: s.title || value };\n      if (s.readOnly) {\n        option.disabled = true;\n      }\n\n      return option;\n    };\n\n    if (schema.anyOf) {\n      return schema.anyOf.map(toEnum);\n    }\n\n    if (schema.oneOf) {\n      return schema.oneOf.map(toEnum);\n    }\n\n    return this.toEnumOptions(<JSONSchema7> schema.items);\n  }\n\n  private isFieldValid(field: FormlyFieldConfig, schema: JSONSchema7, options: IOptions): boolean {\n    const { form } = (field.options as any)._buildField({\n      form: new FormGroup({}),\n      fieldGroup: [this._toFieldConfig(schema, { ...options, resetOnHide: true, ignoreDefault: true, map: null })],\n      model: field.model ? clone(field.model) : (field.fieldArray ? [] : {}),\n    });\n\n    return form.valid;\n  }\n\n  private mergeFields(f1: FormlyFieldConfig, f2: FormlyFieldConfig) {\n    for (let prop in f2) {\n      if (isObject(f1[prop]) && isObject(f2[prop])) {\n        f1[prop] = this.mergeFields(f1[prop], f2[prop]);\n      } else if (f2[prop] != null) {\n        f1[prop] = f2[prop];\n      }\n    }\n\n    return f1;\n  }\n}\n"]}